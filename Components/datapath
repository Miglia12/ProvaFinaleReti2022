entity datapath is
  port  (
          i_clk             : in  std_logic;
          i_rst             : in  std_logic;
          i_data            : in  std_logic_vector(7 downto 0);
          i_address         : in std_logic_vector(15 downto 0);
          rStream_load      : in std_logic;
          rMaxAddress_load  : in std_logic;
          rCounter_load     : in std_logic;
          sel_increaseAddress :in std_logic;
          o_data            : out  std_logic_vector(7 downto 0);
          o_address         : out std_logic_vector(15 downto 0);
          o_increaseAddress : out  std_logic;
          o_nextWord        : out std_logic;
          o_endFile         : out  std_logic);
end datapath;

architecture Behavioral of datapath is
  signal o_rStream : STD_LOGIC_VECTOR(7 downto 0);
  signal data_sum : STD_LOGIC_VECTOR(15 downto 0);
  signal o_rMaxAddress : STD_LOGIC_VECTOR(15 downto 0);
  signal mux_rAddress : STD_LOGIC_VECTOR(15 downto 0);
  signal o_rCounter : STD_LOGIC_VECTOR(15 downto 0);
  signal MaxAddress_sum : STD_LOGIC_VECTOR(15 downto 0);
  signal counter_sum : STD_LOGIC_VECTOR(15 downto 0);
  signal sub : STD_LOGIC_VECTOR(15 downto 0);
begin

--configurazione del registro Stream
  process(i_clk, i_rst)
  begin
    if (i_rst = '1') then
      o_rStream <= (others => '0')
    elsif i_clk'event and i_clk = '1' then
      if(rStream_load = '1') then
        o_rStream <= i_data;
      end if;
    end if;
  end process;

  --aumenta di 1 il MaxAddress
  MaxAddress_sum <= ("00000000" & i_data) + 1;

  --configurazione del registro MaxAddress
  process(i_clk, i_rst)
  begin
    if (i_rst = '1') then
      o_rMaxAddress <= (others => '0')
    elsif i_clk'event and i_clk = '1' then
      if(rMaxAddress_load = '1') then
        o_rMaxAddress <= MaxAddress_sum;
      end if;
    end if;
  end process;

  --configurazione mux per l'aumento o il reset del contatore Address
  with sel_increaseAddress select
    mux_rAddress <= (others => '0') when '0';
                    counter_sum  when '1';
                    (others => 'X') when others;

  --configurazione registro Counter, che contiene l'indirizzo da leggere in memoria
  process(i_clk, i_rst)
  begin
    if (i_rst = '1') then
      o_rCounter <= (others => '0')
    elsif i_clk'event and i_clk = '1' then
      if(rCounter_load = '1') then
        o_rCounter <= mux_rAddress;
      end if;
    end if;
  end process;
